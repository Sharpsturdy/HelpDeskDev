@using Help_Desk_2.Utilities
@using Help_Desk_2.Models
@model KnowledgeFAQ

@{
      AllSorts.setNavProperties(ViewBag, true); //This is a single item page

    /*
      ViewBag.mode = 0 New KB Article  
      ViewBag.mode = 1 Edit KB Article 
      ViewBag.mode = 2 Details KB Article
    */
    
    
    //Force read-only for archived articles
    if (ViewBag.mode == 1 && Model.archived) { ViewBag.mode = 2; };
    if (ViewBag.mode == 0)
    {

        ViewBag.Title = "New Knowledge Base Article";
        ViewBag.Status = "Draft";
        ViewBag.CreationDate = String.Format("{0:d}", DateTime.Now);

        ViewBag.displayName = AllSorts.getUserDisplayName();
    }
    else
    {
        ViewBag.Title = "KB: " + Model.headerText;
        ViewBag.displayName = Model.Originator?.displayName;
        ViewBag.Status = Model.status;
        ViewBag.CreationDate = Html.DisplayFor(model => model.dateComposed);
    }

    if (ViewBag.mode < 2)
    {

        ViewBag.addAttachCode = "1"; //Activate attach code
        ViewBag.addTinyMCECode = "1"; //Activate tinymce code

    }
}
@section cssCustomTop {
    @Styles.Render("~/Content/Select2/css/select2.min.css")
    @Styles.Render("~/Content/Select2/css/select2-bootstrap.min.css")
}

@section scriptsCustom {
    <script src="~/Content/Select2/js/select2.min.js"></script>
}
<header class="container-custom-top">
    <h2>
        @ViewBag.Title <span class="summary-top pull-right">@ViewBag.Status</span>
    </h2>
    @if (ViewBag.mode > 0)
    {
        <p class="text-muted">Created by @ViewBag.displayName on @ViewBag.CreationDate. Expiry Date : @Model.expiryDate</p>
    }
    else if (Model != null)
    {
        <p class="text-warning">This article will supercede article '@Model.headerText'</p>
    }
</header>

<hr class="title" />


@using (Html.BeginForm(ViewBag.mode == 0 ? "New" : "Edit", "KnowledgeBase", FormMethod.Post,
                             new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.Hidden("type", 2) <!-- KBs always have type == 2 -->
        @Html.HiddenFor(model => model.published)
        @Html.HiddenFor(model => model.deleted)
        @Html.HiddenFor(model => model.archived)

        @if (Model != null)
        {
            @Html.HiddenFor(model => model.archiveID)
        }


        @if (ViewBag.mode == 1)
        {
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.originatorID)
            @Html.HiddenFor(model => model.dateComposed)
            @Html.HiddenFor(model => model.dateSubmitted)
            @Html.HiddenFor(model => model.expiryDate)
            @Html.HiddenFor(model => model.dateUnpublished)
        }
        <div class="container-form knowledgebase">
            @if (ViewBag.mode < 2)
            {
                // Edit only
                <div class="panel panel-info">
                    <div class="panel-heading">
                        @Html.DisplayNameFor(model => model.headerText)
                    </div>
                    <div class="panel-body1">
                        @if (ViewBag.mode == 1 && Model.published)
                        {
                            @Html.Raw(Model.headerText)
                            @Html.HiddenFor(model => model.headerText)
                        }
                        else
                        {
                        @Html.EditorFor(model => model.headerText, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.headerText, "", new { @class = "text-danger" })
                        }
                    </div>
                </div>
            }
            <div class="panel panel-info">
                <div class="panel-heading">
                    @Html.DisplayNameFor(model => model.description)
                </div>
                <div class="panel-body1">
                    @if (ViewBag.mode == 2 || (ViewBag.mode == 1 && Model.published))
                    {
                        @Html.Raw(Model.description)
                        @Html.HiddenFor(model => model.description)
                    }
                    else
                    {
                        @Html.TextAreaFor(model => model.description, new { @class = "form-control richeditor" })
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    }
                </div>
            </div>

            <div class="panel panel-info">
                <div class="panel-heading">
                    @Html.DisplayNameFor(model => model.notes)
                </div>
                <div class="panel-body1">
                    @if (ViewBag.mode == 2 || (ViewBag.mode == 1 && Model.published))
                    {
                        @Html.Raw(Model.notes)
                    }
                    else
                    {
                        @Html.TextAreaFor(model => model.notes, new { @class = "form-control richeditor" })
                        @Html.ValidationMessageFor(model => model.notes, "", new { @class = "text-danger" })
                    }
                </div>
            </div>

            <!--Keywords-->
            <div class="panel panel-info">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.keywords)</div>

                <div class="panel-body1">
                    @if (ViewBag.mode == 0)
                    {
                        @Html.DropDownList("inkeywords", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 1), "ID", "Text"), new { @class = "select2-editor", multiple = "multiple" })
                    }
                    else if (ViewBag.mode == 1)
                    {

                        @Html.DropDownList("inkeywords", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 1), "ID", "Text", Model.keywords.Select(x => x.ID)), new { @class = "select2-editor", multiple = "multiple" })

                    }
                    else
                    {
                        @String.Join(", ", Model.keywords.Select(x => x.text))
                    }
                </div>
            </div>

            <!--Expert Areas-->
            <div class="panel panel-info">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.expertAreas)</div>
                <div class="panel-body1">
                    @if (ViewBag.mode == 0)
                    {
                        @Html.DropDownList("inexpertareas", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 2), "ID", "Text"), new { @class = "select2-editor", multiple = "multiple" })
                    }
                    else if (ViewBag.mode == 1)
                    {

                        @Html.DropDownList("inexpertareas", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 2), "ID", "Text", Model.expertAreas.Select(x => x.ID)), new { @class = "select2-editor", multiple = "multiple" })
                    }
                    else
                    {
                        @String.Join(", ", Model.expertAreas.Select(x => x.text))
                    }
                </div>
            </div>

            <!--Attachment section-->
            <div class="panel panel-info">
                <div class="panel-heading">@Html.DisplayName("Attachments")</div>
                <div>
                    @if (Model != null)
                    {
                        @Html.HiddenFor(model => model.deleteField)
                        if (Model.Files != null && Model.Files.Count > 0)
                        {
                            <table class="table table-condensed">
                                <tr><th>File Name</th><th>Size</th><th></th></tr>
                                @foreach (var t in Model.Files)
                                {
                                    <tr>
                                        <td class="fileID hidden">@t.ID</td>
                                        <td>@Html.ActionLink(t.fileName, "d/" + t.ID, "Files", null, new { target = "_blank" })</td>
                                        <td>@t.displaySize</td>
                                        @if (ViewBag.mode < 2)
                                        {
                                            <td>
                                                <div tabindex="500" class="btn btn-primary btn-custom btn-custom-undelete hidden">
                                                    <i class="fa fa-undo"></i>
                                                    <span class="hidden-xs">Undelete</span>
                                                </div>

                                                <div tabindex="500" class="btn btn-primary btn-custom btn-custom-delete">
                                                    <i class="glyphicon glyphicon-trash"></i>
                                                    <span class="hidden-xs">Delete</span>
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                }
                            </table>
                        }
                    }
                    @if (ViewBag.mode < 2)
                    {
                        <input type="file" name="file1" class="file" data-show-upload="false" data-show-preview="false" />
                    }
                </div>
            </div>

            <!-- Links -->
            <div class="panel panel-info">
                <div class="panel-heading">@Html.DisplayName("Links")</div>
                @Html.HiddenFor(model => model.links)

                <table class="table table-condensed links">
                    <tbody>
                        @{
                            string tmpLinks = Model == null ? null : Model.links;
                            string displayLinks = "";
                            if (!string.IsNullOrEmpty(tmpLinks))
                            {
                                var links = tmpLinks.Split(new char[] { '|' });
                                foreach (string link in links)
                                {
                                    if (!string.IsNullOrEmpty(link))
                                    {
                                        var tmp = link.Split(new char[] { '^' });
                                        displayLinks += "<tr class=\"normal\"><td><a href=\"" + tmp[1] + "\" target=\"_blank\">" + tmp[0] + "</a></td>" +
                                            "<td>" + (ViewBag.mode == 2 ? "" : "<input type=\"button\" value=\"Delete\" class=\"btn btn-default btn-custom-action\">") +
                                            "</td></tr>";
                                    }
                                }
                            }
                            @Html.Raw(displayLinks)
                        }

                    </tbody>
                    @if (ViewBag.mode < 2)
                    {
                        <tfoot>
                            <tr>
                                <td colspan="2">
                                    <div class="row add-link">
                                        <div class="col-sm-5">
                                            @Html.EditorFor(model => model.linkText, new { htmlAttributes = new { @placeholder = "Link Display Text" } })
                                        </div>

                                        <div class="col-sm-5">
                                            @Html.EditorFor(model => model.linkURL, new { htmlAttributes = new { @placeholder = "Link URL" } })
                                        </div>

                                        <div class="col-sm-1">
                                            <input type="button" id="addLink" value="Add Link" class="btn btn-default" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </tfoot>
                    }
                </table>
            </div>

            @if (ViewBag.mode != 0 && Model != null && Model.archiveID > 0)
            {
                <div>
                    <p>This article is a new version of @Html.ActionLink((string)ViewBag.archiveTitle, "Details", new { id = Model.archiveID }, htmlAttributes: new { @title = "_blank" })</p>
                </div>
            }

            <div>
                <div class="btn-group btn-group-custom" style="padding-bottom:15px; padding-top:15px">
                    @{
                        var superCede = (Model != null && Model.status == Statuses.Published && AllSorts.UserCan("ManageKBs")) ?
                            Html.ActionLink("Edit", "Edit", new { id = Model.ID }, htmlAttributes: new { @title = "Click to edit this article", @class = "btn btn-primary" })
                            : Html.Raw("");

                        if (ViewBag.mode == 2)
                        {
                            if ((Model.status == Statuses.Draft && Model.originatorID.ToString() == AllSorts.getUserID()) || (Model.dateSubmitted != null && Model.status != Statuses.Published && AllSorts.UserCan("ManageKBs")))
                            {
                                @Html.ActionLink("Edit", "Edit/" + Model.ID, null, htmlAttributes: new { @title = "Click to modify document", @class = "btn btn-primary" })
                            }
                            @superCede
                            <a href="@ViewBag.prevURL" title="Click to return to News home" class="btn btn-primary">Close</a>

                        }
                        else
                        {

                            <input type="submit" name="btnSave" value="Save" class="btn btn-primary" />
                            <input type="submit" name="btnSClose" value="Save & Close" class="btn btn-primary" />
                            if (Model == null || Model.dateSubmitted == null)
                            {
                                <input type="submit" name="btnSubmit" value="Submit" class="btn btn-primary" title="Submit article for approval" />
                          }
                          if (AllSorts.UserCan("ManageKBs"))
                          {
                            if (Model != null && Model.published)
                            {
                                    <input type="submit" name="btnUnApprove" value="UnApprove" class="btn btn-primary" />
                            }
                            else if (Model != null && Model.dateSubmitted != null)
                            {
                                    <input type="submit" name="btnApprove" value="Approve" class="btn btn-primary" />
                                    <button type="button" name="btnDelete" id="del-button" class="btn btn-primary">Delete</button>
                            }

                          }
                            <a href="@ViewBag.prevURL" title="Click to return to News home" class="btn btn-primary">@(ViewBag.mode==1? "Close": "Cancel")</a>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
                        }



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $("#del-button").click(onDelButtonClick);
        });
        function onDelButtonClick() {
            if(confirm("Are you sure you want to delete this KB article?"))
            {
                $("body").append('<form action="@Url.Action("Delete")" method="POST" id="delete-form"></form>');
                $("#delete-form").append("<input name='id' value='@(Model?.ID)'>");
                $("#delete-form").submit();
            }
        }
    </script>
}
