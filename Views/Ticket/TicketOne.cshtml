@using Help_Desk_2.Utilities
@using Help_Desk_2.Models
@model Help_Desk_2.Models.Ticket

@{
    ViewBag.readOnly = false; //Default unless overwritten below


    if (ViewBag.mode == 0)
    {
        ViewBag.Title = "New Ticket";
        ViewBag.status = Statuses.Draft;
        ViewBag.CreationDate = String.Format("{0:d}", DateTime.Now);
        ViewBag.displayName = AllSorts.getUserDisplayName();
    }
    else
    {
        ViewBag.Title = "Ticket: " + Model.displayID;
        ViewBag.status = Html.DisplayFor(model => model.status);
        ViewBag.displayName = Model.Originator.displayName;
        ViewBag.Status = Model.status;
        ViewBag.CreationDate = Html.DisplayFor(model => model.dateComposed);

        //if submitted & this is administrator
        bool canManage = AllSorts.UserCan("ManageTickets");
        ViewBag.readOnly = ViewBag.mode == 2 ||
            (Model.dateSubmitted != null && !canManage);

        ViewBag.readOnly1 = ViewBag.mode == 2 || (ViewBag.readOnly && !canManage);

    }

    if (ViewBag.mode < 2)
    {
        ViewBag.addAttachCode = "1"; //Activate attach code 
        ViewBag.addTinyMCECode = "1"; //Activate tinymce code
    }

    try {
        ViewBag.prevURL = string.IsNullOrEmpty((string)Session["lastView"]) ? Request.UrlReferrer.PathAndQuery : Session["lastView"];
    } catch (Exception e)
    {
        ViewBag.prevURL = Url.Action("Index", "Home");
    }


}
   
@section cssCustomTop {
    @Styles.Render("~/Content/Select2/css/select2.min.css")
    @Styles.Render("~/Content/Select2/css/select2-bootstrap.min.css")
}

@section scriptsCustom {
    <script src="~/Content/Select2/js/select2.min.js"></script>
}

@{  //Ticket message
var tMsg = AllSorts.getNewTicketMessage;

if (!string.IsNullOrEmpty(tMsg))
{
        <div class="panel panel-default panel-ticket-message">@Html.Raw(tMsg)</div>
    }
}
<header class="container-custom-top">
<h2>@ViewBag.Title <span class="summary-top pull-right">@ViewBag.Status</span></h2>
@if (ViewBag.mode > 0)
{
<p class="text-muted">Created by @ViewBag.displayName on @ViewBag.CreationDate</p>
}
</header>

<hr class="title"/>

@using (Html.BeginForm(ViewBag.mode == 0 ? "New" : "Edit", "Ticket", FormMethod.Post,
new { enctype = "multipart/form-data", id = "frmTicket" }))
{
@Html.AntiForgeryToken()

<div class="form-horizontal">
@Html.ValidationSummary(true, "", new { @class = "text-danger" })

@if (ViewBag.mode == 1)
{
     @Html.HiddenFor(model => model.ID)
     @Html.HiddenFor(model => model.originatorID)
     @Html.HiddenFor(model => model.dateComposed)
     @Html.HiddenFor(model => model.dateL1Release)
     @Html.HiddenFor(model => model.dateL2Release)
     @Html.HiddenFor(model => model.dateSubmitted)
     @Html.HiddenFor(model => model.dateCompleted)
}

   
    <div class="container-form ticket">

        <div class="panel panel-info">
            <div class="panel-heading"> @Html.DisplayNameFor(model => model.headerText)</div>
            <div>
                @if (ViewBag.readOnly)
                {
                    @Html.DisplayFor(model => model.headerText)
                    @Html.HiddenFor(model => model.headerText)
                }
                else
                {
                    @Html.EditorFor(model => model.headerText, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.headerText, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading">
                @Html.DisplayNameFor(model => model.description)
            </div>
            <div>
                @if (ViewBag.readOnly)
                {
                    @Html.Raw(Model.description)
                    @Html.HiddenFor(model => model.description)
                }
                else
                {
                    @Html.TextAreaFor(model => model.description, new { @class = "form-control richeditor" })
                    @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <!--Attachment section-->
        <div class="panel panel-info">
            <div class="panel-heading">@Html.DisplayName("Attachments")</div>
            <div>
                @if (Model != null)
                {
                    @Html.HiddenFor(model => model.deleteField)
                    if (Model.Files != null && Model.Files.Count > 0)
                    {
                        <table class="table table-condensed">
                            <tr><th>File Name</th><th>Size</th><th></th></tr>
                            @foreach (var t in Model.Files)
                        {
                                <tr>
                                    <td class="fileID hidden">@t.ID</td>
                                    <td>@Html.ActionLink(t.fileName, "d/" + t.ID, "Files", null, new { target = "_blank" })</td>
                                    <td>@t.displaySize</td>
                                    @if (!ViewBag.readOnly && ViewBag.mode < 2)
                                    {
                                        <td>
                                            <div tabindex="500" class="btn btn-primary btn-custom btn-custom-undelete hidden">
                                                <i class="fa fa-undo"></i>
                                                <span class="hidden-xs">Undelete</span>
                                            </div>

                                            <div tabindex="500" class="btn btn-primary btn-custom btn-custom-delete">
                                                <i class="glyphicon glyphicon-trash"></i>
                                                <span class="hidden-xs">Delete</span>
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                        </table>
                    }
                }
                @if (!ViewBag.readOnly && ViewBag.mode < 2)
                {
                    <input type="file" name="file1" class="file" data-show-upload="false" data-show-preview="false" />
                }
            </div>
        </div>

        <!-- Links -->
        <div class="panel panel-info">
            <div class="panel-heading">@Html.DisplayName("Links")</div>
            @Html.HiddenFor(model => model.links)

            <table class="table table-condensed links">
                <tbody>
                    @{
                        string tmpLinks = Model == null ? null : Model.links;
                        string displayLinks = "";
                        if (!string.IsNullOrEmpty(tmpLinks))
                        {
                            var links = tmpLinks.Split(new char[] { '|' });
                            foreach (string link in links)
                            {
                                if (!string.IsNullOrEmpty(link))
                                {
                                    var tmp = link.Split(new char[] { '^' });
                                    displayLinks += "<tr class=\"normal\"><td><a href=\"" + tmp[1] + "\" target=\"_blank\">" + tmp[0] + "</a></td>" +
                                                                 "<td>" + (ViewBag.mode == 2 ? "" : "<input type=\"button\" value=\"Delete\" class=\"btn btn-default btn-custom-action\">") +
                                                                 "</td></tr>";
                                }
                            }
                        }
                        @Html.Raw(displayLinks)
                    }

                </tbody>
                @if (!ViewBag.readOnly && ViewBag.mode < 2)
                {
                    <tfoot>
                        <tr>
                            <td colspan="2">
                                <div class="row add-link">
                                    <div class="col-sm-5">
                                        @Html.Label("Display Text for the Link")
                                    </div>

                                    <div class="col-sm-5">
                                        @Html.Label("URL for the Link ")
                                    </div>


                                </div>
                            </td>
                        </tr>
                        <tr>

                            <td colspan="2">
                                <div class="row add-link">
                                    <div class="col-sm-5">
                                        @Html.EditorFor(model => model.linkText, new { htmlAttributes = new { @placeholder = "Link Display Text", @style = "width:300px" } })
                                    </div>

                                    <div class="col-sm-5">
                                        @Html.EditorFor(model => model.linkURL, new { htmlAttributes = new { @placeholder = "http://", @style = "width:300px" } })
                                    </div>

                                    <div class="col-sm-1">
                                        <input type="button" id="addLink" value="Add Link" class="btn btn-default" />
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </tfoot>
                }
            </table>
        </div>

        <!-- Level 1 Release -->
        @if (Model != null && Model.dateSubmitted != null && (ViewBag.mode == 1 || Model.dateL1Release != null))
        {
            <div class="panel panel-info">
                <div class="panel-heading">Level 1 Release</div>
                <div class="level1-release">
                    <div class="row">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.sanityCheck, htmlAttributes: new { @class = "control-label text-left " + (ViewBag.readOnly ? "" : "pull-left") })
                            @if (ViewBag.readOnly)
                            {
                                @Html.DisplayFor(model => model.sanityCheck)
                                @Html.HiddenFor(model => model.sanityCheck)
                            }
                            else
                            {
                                @Html.EnumDropDownListFor(model => model.sanityCheck, htmlAttributes: new { @class = "form-control pull-left", @style = "width:auto; margin-left: 10px;" })
                            }
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.dateL1Release, htmlAttributes: new { @class = "control-label text-left" })
                            @Html.DisplayFor(model => model.dateL1Release)
                        </div>
                    </div>
                    <div class="sanity-check-reason @if(Model.sanityCheck == SanityChecks.Accept) { @Html.Raw("hidden"); } ">
                        @Html.LabelFor(model => model.reason, htmlAttributes: new { @class = "control-label text-left" })
                        @if (ViewBag.readOnly)
                    {
                            @Html.DisplayFor(model => model.reason)
                            @Html.HiddenFor(model => model.reason)
                        }
                        else
                        {
                            @Html.TextAreaFor(model => model.reason, new { @class = "form-control" })
                        }
                    </div>

                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.reason)
            @Html.HiddenFor(model => model.sanityCheck)
        }

        <!-- Level 2 Release -->
        @if (Model != null && Model.sanityCheck == SanityChecks.Accept && (ViewBag.mode == 1 || Model.dateL2Release != null))
        {
            <div class="panel panel-info">
                <div class="panel-heading">Level 2 Release</div>
                <div class="level2-release">
                    <div class="row">
                        <div class="col-md-6">

                            @Html.Label("Assignee", htmlAttributes: new { @class = "control-label text-left " + (ViewBag.readOnly1 ? "" : "pull-left") })
                            @if (ViewBag.readOnly1)
                            {
                                @Html.DisplayFor(model => model.Responsible.displayName)
                                @Html.HiddenFor(model => model.responsibleID)
                            }
                            else
                            {
                                @Html.DropDownList("responsibleID", new SelectList(AllSorts.AllUsers, "userID", "displayName", Model.responsibleID), htmlAttributes: new { @class = "form-control pull-left", @style = "width:auto; margin-left: 10px" })
                            }
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ticketID, htmlAttributes: new { @class = "control-label text-left" })
                            @Html.DisplayFor(model => model.ticketID)
                            @Html.HiddenFor(model => model.ticketID)
                        </div>
                    </div>

                    <div>
                        @Html.LabelFor(model => model.adminComments, htmlAttributes: new { @class = "control-label text-left" })
                        @if (ViewBag.readOnly1)
                    {
                            @Html.DisplayFor(model => model.adminComments)
                            @Html.HiddenFor(model => model.adminComments)
                        }
                        else
                        {
                            @Html.EditorFor(model => model.adminComments, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.adminComments, "", new { @class = "text-danger" })
                        }
                    </div>
                </div>
            </div>
        }

        else
        {
            @Html.HiddenFor(model => model.ticketID)
            @Html.HiddenFor(model => model.adminComments)
            @Html.HiddenFor(model => model.responsibleID)
        }


        <!-- Completion -->
        @if (Model != null && Model.dateL2Release != null)
        {
            <div class="panel panel-info">
                <div class="panel-heading">Completion</div>
                <!-- Summary -->
                <div class="completion">
                    <div>
                        @Html.LabelFor(model => model.summary, htmlAttributes: new { @class = "control-label text-left" })
                        @if (ViewBag.mode == 2)
                    {
                            @Html.DisplayFor(model => model.summary)
                            @Html.HiddenFor(model => model.summary)
                        }
                        else
                        {
                            <div>
                                @Html.EditorFor(model => model.summary, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.summary, "", new { @class = "text-danger" })
                            </div>
                        }

                    </div>

                    <!-- Report -->
                    <div>
                        @Html.LabelFor(model => model.report, htmlAttributes: new { @class = "control-label text-left" })
                        @if (ViewBag.mode == 2)
                    {
                            @Html.DisplayFor(model => model.report)
                            @Html.HiddenFor(model => model.report)
                        }
                        else
                        {
                            <div>
                                @Html.TextAreaFor(model => model.report, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.report, "", new { @class = "text-danger" })
                            </div>
                        }
                    </div>

                    <!-- Resources -->
                </div>
            </div>

            <!--Keywords-->
            <div class="panel panel-info">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.keywords)</div>

                <div class="panel-body1">
                    @if (ViewBag.mode == 0)
                    {
                        @Html.DropDownList("inkeywords", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 1), "ID", "Text"), new { @class = "select2-editor", multiple = "multiple" })
                    }
                    else if (ViewBag.mode == 1)
                    {
                        //Help_Desk_2.DataAccessLayer.HelpDeskContext db = new Help_Desk_2.DataAccessLayer.HelpDeskContext();

                        @Html.DropDownList("inkeywords", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 1), "ID", "Text", Model.keywords.Select(x => x.ID)), new { @class = "select2-editor", multiple = "multiple" })

                    }
                    else
                    {
                        @String.Join(", ", Model.keywords.Select(x => x.text))
                    }
                </div>
            </div>

            <!--Expert Areas-->
            <div class="panel panel-info">
                <div class="panel-heading">@Html.DisplayNameFor(model => model.expertAreas)</div>
                <div class="panel-body1">
                    @if (ViewBag.mode == 0)
                    {
                        @Html.DropDownList("inexpertareas", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 2), "ID", "Text"), new { @class = "select2-editor", multiple = "multiple" })
                    }
                    else if (ViewBag.mode == 1)
                    {

                        @Html.DropDownList("inexpertareas", new MultiSelectList(AllSorts.FullWordList.Where(x => x.type == 2), "ID", "Text", Model.expertAreas.Select(x => x.ID)), new { @class = "select2-editor", multiple = "multiple" })
                    }
                    else
                    {
                        @String.Join(", ", Model.expertAreas.Select(x => x.text))
                    }
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.summary)
            @Html.HiddenFor(model => model.report)
        }

        <!-- Audit trail-->

        @if (Model != null && ViewBag.mode != 0)
        {
            var at = from x in Model.AuditTrail
                     join u in AllSorts.AllUsers on x.userID equals u.userID
                     orderby x.timeStamp ascending
                     select new { x.timeStamp, u.displayName, x.text };
            <div class="panel panel-default">
                <div class="panel-heading">Audit Trail</div>
                <div>
                    

                    <table class="table table-bordered table-condensed table-audit">
                        <thead><tr><th style="width: 10.5em;">Date</th><th style="width: 10.5em;" nowrap>User</th><th>Action</th></tr></thead>
                        @foreach (var tmp in at)
                    {
                            <tr><td>@tmp.timeStamp</td><td nowrap>@tmp.displayName</td><td>@tmp.text</td></tr>
                        }
                    </table>
                </div>
            </div>
        }


        <div>
            <div class="btn-group btn-group-custom" style="padding-bottom:15px; padding-top:15px">
                @if (ViewBag.mode == 2)
                {

                    bool allowAccess = false;
                    if (Model.dateSubmitted == null)
                    {
                        if (Model.originatorID.ToString() == AllSorts.getUserID())
                        {
                            allowAccess = true;
                        }
                    }
                    else
                    {
                        if (Model.responsibleID.ToString() == AllSorts.getUserID() || AllSorts.UserCan("ManageTickets"))
                        {
                            allowAccess = true; // go ahead
                        }
                    }

                    if (allowAccess)
                    {
                        if (Model.dateCompleted.HasValue)
                        {
                            @Html.HiddenFor(m => m.ID)
                            @Html.HiddenFor(m => m.responsibleID)
                            <input type="submit" name="btnReopen" value="Reopen" class="btn btn-primary" />
                        }
                        else
                        {
                            @Html.ActionLink("Edit", "Edit/" + Model.ID, null, htmlAttributes: new { @title = "Click to modify document", @class = "btn btn-primary" })
                        }
                    }
                    <a href="@ViewBag.prevURL" title="Click to return to News home" class="btn btn-primary">Close</a>
                }
                else
                {

                    <input type="submit" name="btnSave" value="Save" class="btn btn-primary" />
                    <input type="submit" name="btnSClose" value="Save & Close" class="btn btn-primary" />
                    if (Model == null || Model.dateSubmitted == null)
                    {
                        <input type="submit" name="btnSubmit" value="Submit" class="btn btn-primary" />
                    }
                    if (Model != null && ViewBag.mode == 1)
                    {
                        if (Model.dateL1Release != null)
                        {
                            <input type="submit" name="btnAssign" value="Assign Ticket" class="btn btn-primary" title="Marks ticket as assigned and notifies the assignee" />
                        }

                        if (Model.dateL2Release != null && (AllSorts.UserCan("ManageTickets") || Model.responsibleID.ToString() == AllSorts.getUserID()))
                        {
                            <input type="submit" name="btnReturn" value="Return Ticket" class="btn btn-primary" title="Return ticket to Administrator" />
                            <input type="submit" name="btnComplete" value="Complete Ticket" class="btn btn-primary" title="Mark ticket as completed and notifies the originator" />
                        }
                        <input type="submit" name="btnDelete" value="Delete" class="btn btn-primary" />
                    }


                    <a href="@ViewBag.prevURL" title="Click to return to News home" class="btn btn-primary">Cancel</a>
                }
            </div>
        </div>

    </div>
</div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
